Assignment 3 FAQ

 

1) The assignments states there is an overdraft limit of $5000, is this $5000 for each acc? Or is this $5000 overall for all accounts?

Answer: This is the overdraft limit for each acc that has overdraft protection.

2) Do the initial depositors count towards the accounts transaction number?

Answer: Yes, the initial depositors transactions count towards the total number of transactions.

3) When implementing the mutually exclusive algorithm, is there anything in particular you would like us to use. Is it acceptable to use locks from the pthread library as in the examples to implement the mutually exclusive algorithm?

Answer: From the assignment description: “You are allowed to use any mutual exclusion/semaphore related C function calls.” So yes, you can use the Pthread library.

4) Does a transfer increment the transaction count in both sender and receiver or just the sender?

Answer: Yes, two transactions are involved in a transfer. An amount is deducted from the senders acc balance and added to the receivers acc balance.

5) When a client performs an action on an acc such as deposit, withdraw, transfer, will there be always associated fees applied to that acc?

Answer: It depends how that particular acc is configured for those fees. (refer to the example provided in the assignment)

6) How the deposit/withdraw fee is applied when c1 transfers funds from a1 to a2:

Answer: When c1 made a transfer from a1 to a2 and if there is transfer fee associated to a1 and a2 then transfer fees are applied to both a1 and a2.

7)  How do I apply the overdraft fee?

Answer: If the acc balance after completing a particular transaction is between -1 to -500, apply

1 x Overdraft Fee

-501 to -1000 apply 2 x Overdraft Fee

-1001 to -1500, apply 3 x Overdraft Fee

…

…

-4501 to -5000, apply 10 x Overdraft Fee 

After applying the overdraft fee, you need to check the acc balance again to make sure that the transaction is valid (greater than or equal to -5000) or that you do not need to apply any more fees.

The overdraft fee is applied once for every multiple of $500. 

 

The following example illustrates how the overdraft fee is applied:

a1 type personal d 0 w 0 type 0 transactions 20 2 overdraft Y 40

dep1 d a1 1

c1 w a1 200

c2 w a1 100

c3 w a1 161

c4 w a1 490 

 

Account 1 has overdraft protection, $0 fee to withdraw from the acc, and has an acc balance of $1 after the depositor deposits $1. The overdraft fee is $40.

 

a)     Client 1 withdraws $200 from acc 1. 1 -200 = -199. Since -199 is less than 0 and greater than or equal to -500, the overdraft fee is applied. Account balance = -199 - 40 = -239.

 

b)     Client 2 withdraws $100 from acc 1, the acc balance is -239-100 = -339. Since -339 is greater than or equal to -500 and the overdraft fee has already been applied by client 1, the overdraft fee is not applied here.


c)     Client 3 withdraws $161 from acc 1, the balance is -339-161 = -500. Since the balance is equal to -500 and the overdraft fee has already been applied by client 1, the overdraft fee is not applied here.

 

d)     Client 4 withdraws $490. -500 - 490 = -990. Since -990 is less than -500 and greater than or equal to -1000, the $40 overdraft fee is applied. -990 - 40 = -1030. However, after applying the overdraft fee, the value is less than -1000 and greater than or equal to -1500. Therefore, the overdraft fee would be applied again. The acc balance would finally be -1070.

 

8) Can we assume that each transaction will have values of type int or can the values also be doubles?

 

Answer: You can assume that the value for each transaction will be a whole number greater than 0.

 

 

9) Clarification:

As mentioned in the assignment description, “c1 d a1 100 w a2 500 type a1 a2 25” specifies operations performed by client 1. "Client #1 deposits $100 into Account #1, then withdraws $500 from Account#2, and then Transfers $25 from Account #1 to Account #2.” The transactions made by a particular client must be performed in order.

 

Note that when there are multiple clients, transactions performed by different clients can be in any order due to the concurrent nature of threads.

 

For example:

c1 d a1 200 d a3 100 w a2 150

c2 w a2 111 d a1 112

c3 d a1 333 type a1 a2 222

 

A possible order of processing the transactions could be the following:

1) Client 1 deposits 200 into acc 1

2) Client 3 deposits 333 into acc 1

3) Client 1 deposits 100 into acc 3

4) Client 2 withdraws 111 from acc 2

5) Client 3 transfers 222 from acc 1 to acc 2

6) Client 1 withdraws 150 from acc 2

7) Client 2 deposits 112 into acc 1

 

10) Submission Guidelines:

You MUST submit a makefile.

a) “make” should compile your program and generate asn3.out

b) “make clean” should remove asn3.out and the output text file

c) Do NOT submit a compressed/zipped file.

d) Only submit .c files, .h files (if necessary) and a makefile.

e) Thoroughly test your program on one of the MC 244 systems to ensure that it compiles.

11) Here's a list of some Common Mistakes to Avoid for your Assignment 3 submission (check before you submit):

a.       Incorrect input and output filenames. Your program must use “assignment_3_input_file.txt” and the output file must be “assignment_3_output_file.txt”

b.       “make” incorrectly generates asn3 instead of asn3.out

c.       Incorrectly submit makefile.txt. Should be Makefile

d.       Makefile should not run your program. The following should NOT be in your makefile: “./asn3.out > assignment_3_output_file.txt”

e.       You must test your program on one of the MC 244 systems. Do NOT test your program on Windows/macOS/Ubuntu/Other Linux distribution and hope it works on one of the MC 244 systems.

12) It is possible that the final balance of each acc could be different each time you run the program since the order of client transactions is not deterministic. How do you test my program's accuracy from the final balance produced by my code?

A: We'll acc for this case when we're making the test case, to make sure the final balances will be the same regardless of the order the client transaction requests are made.

13) In the input file, will it always be the case that acc types will be first, and then depositors, and then the clients?

A: Yes, this order is fixed.